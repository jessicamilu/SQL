# WEATHER OBSERVATION STATION 11 PROBLEM 
# Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[AEIOU]'  OR CITY NOT REGEXP '[AEIOU]$';

# WEATHER OBSERVATION 12 PROBLEM
# Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[AEIOU]'  AND CITY NOT REGEXP '[AEIOU]$';

#HIGHER THAN 75 MARKS PROBLEM
# Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT NAME FROM STUDENTS WHERE Marks > 75 ORDER BY RIGHT (NAME, 3), ID ASC;
SELECT NAME FROM STUDENTS WHERE Marks > 75 ORDER BY SUBSTRING(NAME,-3), ID;

#EMPLOYEE NAMES
#Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT NAME FROM EMPLOYEE ORDER BY NAME ASC; 

#EMPLOYEE SALARIES
#Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
SELECT name FROM EMPLOYEE WHERE SALARY > '2000' AND MONTHS < '10' ORDER BY employee_id ASC;

#AVERAGE POPULATION
# Query the average population for all cities in CITY, rounded down to the nearest integer.
SELECT ROUND(AVG(POPULATION)) FROM CITY;

#AFRICAN CITIES
#Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
SELECT CITY.NAME
FROM CITY 
INNER JOIN COUNTRY 
    ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'AFRICA'

#NEW COMPANIES
#Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
SELECT c.company_code, c.founder,
    COUNT(DISTINCT l.lead_manager_code),
    COUNT(DISTINCT s.senior_manager_code),
    COUNT(DISTINCT m.manager_code),
    COUNT(DISTINCT e.employee_code)
FROM Company as c
JOIN Lead_Manager AS l
ON c.company_code = l.company_code
JOIN Senior_Manager AS s
on l.company_code = s.company_code
JOIN Manager AS m
ON m.company_code = s.company_code
JOIN Employee as e
ON e.company_code = m.company_code
GROUP BY c.company_code, c.founder
ORDER BY c.company_code; 


